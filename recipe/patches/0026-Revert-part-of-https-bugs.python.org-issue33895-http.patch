diff -Naur Python-3.9.0rc2.orig/Python/dynload_win.c Python-3.9.0rc2/Python/dynload_win.c
--- Python-3.9.0rc2.orig/Python/dynload_win.c	2020-09-18 15:36:00.260541355 -0300
+++ Python-3.9.0rc2/Python/dynload_win.c	2020-09-18 15:43:37.614824766 -0300
@@ -180,6 +180,12 @@
         HINSTANCE hDLL = NULL;
         unsigned int old_mode;
 
+        /* The fix in https://bugs.python.org/issue33895 breaks 'import lief'. The fix means that any static initialization
+           cannot call into Python (or if it does it needs to aquire the GIL itself.
+           Other worse ideas:
+           DONT_RESOLVE_DLL_REFERENCES :: https://devblogs.microsoft.com/oldnewthing/20050214-00/?p=36463 */
+        int drop_gil = _wgetenv(L"CONDA_DLL_SEARCH_MODIFICATION_DROP_GIL_AS_PER_UPSTREAM") ? 1 : 0;
+
         /* Don't display a message box when Python can't load a DLL */
         old_mode = SetErrorMode(SEM_FAILCRITICALERRORS);
 
@@ -191,10 +197,15 @@
         extern int CondaEcosystemModifyDllSearchPath(int, int);
         CondaEcosystemModifyDllSearchPath(1, 1);
 
-        Py_BEGIN_ALLOW_THREADS
-        hDLL = LoadLibraryExW(wpathname, NULL,
-                              LOAD_WITH_ALTERED_SEARCH_PATH);
-        Py_END_ALLOW_THREADS
+        if (drop_gil) {
+            Py_BEGIN_ALLOW_THREADS
+            hDLL = LoadLibraryExW(wpathname, NULL,
+                                LOAD_WITH_ALTERED_SEARCH_PATH);
+            Py_END_ALLOW_THREADS
+        } else {
+            hDLL = LoadLibraryExW(wpathname, NULL,
+                                LOAD_WITH_ALTERED_SEARCH_PATH);
+        }
 
         /* restore old error mode settings */
         SetErrorMode(old_mode);
